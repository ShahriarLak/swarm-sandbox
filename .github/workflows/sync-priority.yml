name: Sync Project Priority

on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened]

permissions:
  contents: read
  issues: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Sync Priority field from labels
        uses: actions/github-script@v7
        env:
          PROJECTS_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
          PROJECT_NUMBER: 2        # from your URL .../projects/2/...
          FIELD_NAME: Priority
        with:
          script: |
            const token = process.env.PROJECTS_TOKEN;
            const projectNumber = Number(process.env.PROJECT_NUMBER);
            const fieldName = process.env.FIELD_NAME;

            const issue = context.payload.issue;
            const labels = (issue.labels || []).map(l => (typeof l === 'string' ? l : l.name).toLowerCase());
            const desired =
              labels.includes('priority: high') ? 'High' :
              labels.includes('priority: medium') ? 'Medium' :
              labels.includes('priority: low') ? 'Low' : null;

            if (!desired) {
              core.info('No priority:* label on this issue; nothing to sync.');
              return;
            }

            const graphql = (query, variables = {}) =>
              github.graphql(query, { ...variables, headers: { authorization: `bearer ${token}` } });

            // 1) Resolve your user project by NUMBER via the authenticated viewer
            const d1 = await graphql(`
              query($number:Int!){
                viewer {
                  login
                  projectV2(number:$number){
                    id
                    title
                    fields(first:50){
                      nodes{
                        ... on ProjectV2SingleSelectField { id name options{ id name } }
                        ... on ProjectV2Field { id name }
                      }
                    }
                  }
                }
              }`,
              { number: projectNumber }
            );

            const project = d1.viewer?.projectV2;
            if (!project) {
              core.setFailed(\`Viewer projectV2 #\${projectNumber} not found (check the number in the URL and token owner).\`);
              return;
            }

            const priorityField = project.fields.nodes.find(f => f.name === fieldName && f.options);
            if (!priorityField) { core.setFailed(\`Field "\${fieldName}" not found\`); return; }

            const option = priorityField.options.find(o => o.name.toLowerCase() === desired.toLowerCase());
            if (!option) { core.setFailed(\`Option "\${desired}" not found\`); return; }

            // 2) Find this issue's Project item by paging the project's items
            const issueNodeId = issue.node_id;
            let itemId = null, after = null;
            for (let i = 0; i < 20; i++) {
              const d2 = await graphql(`
                query($pid:ID!, $after:String){
                  node(id:$pid){
                    ... on ProjectV2 {
                      items(first:50, after:$after){
                        nodes{
                          id
                          content{ __typename ... on Issue { id number } }
                        }
                        pageInfo{ hasNextPage endCursor }
                      }
                    }
                  }
                }`,
                { pid: project.id, after }
              );

              const items = d2.node.items.nodes;
              const hit = items.find(n => n.content?.__typename === 'Issue' && n.content.id === issueNodeId);
              if (hit) { itemId = hit.id; break; }

              const pi = d2.node.items.pageInfo;
              if (!pi.hasNextPage) break;
              after = pi.endCursor;
            }

            if (!itemId) {
              core.setFailed(\`Issue #\${issue.number} is not in this project (check Auto-add).\`);
              return;
            }

            // 3) Update the Priority field
            await graphql(`
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,
                  itemId:$itemId,
                  fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }){ projectV2Item { id } }
              }`,
              { projectId: project.id, itemId, fieldId: priorityField.id, optionId: option.id }
            );

            core.info(\`Priority set to \${desired} for issue #\${issue.number}\`);
